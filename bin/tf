#!/usr/bin/env bash

##############################################################################
# Shell Behaviour
##############################################################################

# Check for unbound variables being used
# set -o nounset

# Exit is a bad command is attempted. If you're going to handle errors then
# leave this disabled
# set -o errexit

# Exit if any of the commands in a pipeline exit with a non-zero exit code
# set -o pipefail

AWSH_ROOT=/opt/awsh

##############################################################################
# Variables
##############################################################################

CONST_COMMAND_LINE="$@"
CONST_OS_VERSION=$(uname -r)
CONST_SYSTEM_TYPE=$(uname -m)
CONST_SCRIPT_NAME=${0##*/}

_LOGFILE="$(mktemp)/${CONST_SCRIPT_NAME}.log"
_LOGFILE_RETAIN_NUM_LINES=0
_COLOR_RESET="$(echo -e '\e[0m')"
_COLOR_RED="$(echo -e '\e[31m')"

# Default for AWSH_ROOT if unset
: "${AWSH_ROOT:='/opt/awsh'}"

# Load the AWSH Frameverk
source ${AWSH_ROOT}/etc/awshrc

# Defaults
: ${TIMESTAMP_FORMAT:="%Y-%m-%dT%H:%M:%S%z"}    # override via environment
: ${TF_VAR_FILE:="00-environment.tfvars"}       # override via environment

TF_VAR_FILE_ARGS=

##############################################################################
# Functions
##############################################################################

# set _LOGFILE to the full path of your desired logfile; make sure
# you have write permissions there. set _LOGFILE_RETAIN_NUM_LINES to the
# maximum number of lines that should be retained at the beginning
# of your program execution.
# execute 'logsetup' once at the beginning of your script, then  use 'log' as
# many times you like.
function _logsetup {
    TMP=$(tail -n ${_LOGFILE_RETAIN_NUM_LINES} "${_LOGFILE}" 2>/dev/null) && echo "${TMP}" > "${_LOGFILE}"
    exec > >(tee -a "${_LOGFILE}")
    exec 2>&1
}


function _log {
    echo "[$(date --rfc-3339=seconds)]: $*${_COLOR_RESET}"
}


function _log_error {
    echo "[$(date --rfc-3339=seconds)]: ${_COLOR_RED}$*${_COLOR_RESET}"
}


function _exit_with_error {
    echo "${_COLOR_RED}$*${_COLOR_RESET}"
    exit 1
}


# A helper function that can be used to pipe multiple items to the logging helper
function _log_pipe {
    while IFS= read -r line; do _log "${line}"; done
}


# Specialized init to tidy existing repos
function _tf_init {
    # Trash and rebuild the .terraform folder
    if [[ -d "$(pwd)/.terraform" ]]; then
        _screen_info "Cleanup of local TF Plugins cache folder"
        rm -rf "$(pwd)/.terraform" 2>/dev/null
    fi
    # Rename common var files to aupport auto-loading
    if [[ -f "$(pwd)/00-environment.tfvars" ]]; then
        _screen_info "Moving 00-environment.tfvars to support auto-loading"
        mv "$(pwd)/00-environment.tfvars" "$(pwd)/00-environment.auto.tfvars"
    fi
}


function _tf_doc {
    local _DOC_NAME="AS-BUILT-DOC.md"
    {
        echo ""
        "${HOME}/bin/terraform-state-doc"
        echo ""
        echo "## Stack Changelog"
        echo ""
        echo "| Commit | Changed By | Date Modified | Description of Change|"
        echo "|:--- |:--- | ---:|:--- |"
        git mdlog
    } > "${_DOC_NAME}"
    echo "Updated ${_DOC_NAME} from terraform.tfstate"
}


function _tf_detect_local_vars {
    local var_file_name="00-environment.tfvars"
    _screen_info -n "Check for local vars..."
    if [[ -f "$(pwd)/${var_file_name}" ]]; then
        _screen_info "Found (${var_file_name}). Setting CONF"
        CONF="${var_file_name}"
        TF_VAR_FILE_ARGS="-var-file=${CONF}"
        export CONF TF_VAR_FILE_ARGS
    fi
}


function _tf_export {
    local _TF_EXPORT_OUTPUT="$(basename "$(pwd)").json"
    [ -f terraform.tfstate ] || _exit_with_error "No Terraform state file found to export"
    _screen_info "Exporting managed resources to ${_TF_EXPORT_OUTPUT}"
    terraform output managed_resources_json | jq '.' > "${_TF_EXPORT_OUTPUT}"
}


# Check our code for syntax/lint issues
function _tf_check_syntax {
    _screen_info "Checking syntax with tflint"
    tflint --config "${HOME}/etc/tflint.hcl"
    [ $? -eq 0 ] || _exit_with_error "Resolve syntax errors first"
}


# Change the default TF version used
function _tf_change_default_version {
    local requested_tf_ver=$1
    local tf_binaries="$(ls -1 /usr/local/bin/terraform-* | xargs -i basename "{}" | sed -e 's/terraform-//g' | tr '\n' ' ')"
    if [[ -z ${requested_tf_ver} ]]; then
        _screen_info "Available Terraform Versions: ${tf_binaries}"
        _screen_info "You can change the default using 'tf default 0.15.5'"
    elif [[ -f "/usr/local/bin/terraform-${requested_tf_ver}" ]]; then
        _screen_info "Changing default version to ${requested_tf_ver}"
        [[ -f "${HOME}/bin/terraform" ]] && rm -f "${HOME}/bin/terraform"
        ln -s "/usr/local/bin/terraform-${requested_tf_ver}" "${HOME}/bin/terraform"
        echo -n "Active version now: "
        terraform -version
    else
        _screen_error "Request TF version (${requested_tf_ver}) not available. Please choose from: ${tf_binaries}"
        _screen_info "You can change the default using 'tf default 0.15.5'"
    fi
}


function _tf_change_version_autodetect {

    local statefile="$(pwd)/terraform.tfstate"
    if [ -f "${statefile}" ]; then
        _screen_info "Attempting to detect TF version from local state file"
        detected_tf_ver=$(cat "${statefile}" | jq -r '.terraform_version // ""')
        if [ -z ${detected_tf_ver} ]; then
            _screen_error "Unable to read version from ${statefile}"
        else
            _tf_change_default_version ${detected_tf_ver}
        fi

    else
        _screen_error "No local Terraform statefile found"
    fi

}


##############################################################################
# Main Script
##############################################################################

# Redirect all output through the time-stamper
# exec &> >(_log_pipe)

tf_command="${1}"
# _tf_detect_local_vars

case ${tf_command} in

    doc)
        _tf_doc
    ;;

    init)
        _tf_init
        terraform "${@}" ${TF_VAR_FILE_ARGS}
    ;;

    plan|apply|destroy)
        if grep -rqw "$(pwd)" -e 'aws = {'; then
            _assert_is_authenticated
            terraform "${@}" ${TF_VAR_FILE_ARGS}
        else
            terraform "${@}" ${TF_VAR_FILE_ARGS}
        fi
    ;;

    plandiff|diffplan)
        if grep -rqw "$(pwd)" -e 'aws = {'; then
            _assert_is_authenticated
            terraform "${@}" ${TF_VAR_FILE_ARGS} | landscape
        else
            terraform "${@}" ${TF_VAR_FILE_ARGS} | landscape
        fi
    ;;

    export)
        _tf_export
    ;;

    fmt|format)
        terraform fmt -recursive
    ;;

    lint)
        _tf_check_syntax
        _screen_info "Syntax check passed, Starting run.."
    ;;

    default|switch)
        shift
        _tf_change_default_version "${@}"
    ;;

    autover)
        shift
        _tf_change_version_autodetect "${@}"
    ;;

    validate|check)
        _tf_check_syntax
        _screen_info "Lint check passed, Starting validation.."
        terraform "${@}" ${TF_VAR_FILE_ARGS}
    ;;

    *)
        terraform "${@}"
    ;;

esac
